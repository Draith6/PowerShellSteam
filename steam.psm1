<#
    .NOTES
    --------------------------------------------------------------------------------
     Code generated by:  SAPIEN Technologies, Inc., PowerShell Studio 2016 v5.2.127
     Generated on:       8/17/2016 8:38 PM
     Generated by:       Draith
    --------------------------------------------------------------------------------
    .DESCRIPTION
        Script generated by PowerShell Studio 2016
#>

	<#	
		===========================================================================
		 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2016 v5.2.127
		 Created on:   	8/16/2016 9:30 PM
		 Created by:   	Donnie Taylor (donnie_taylor@outlook.com)
		 Organization: 	
		 Filename:     	steam.psm1
		-------------------------------------------------------------------------
		 Module Name: steam
		===========================================================================
	#>
	
	
	
	<#
		.SYNOPSIS
			Retrieve a Steam App ID
		
		.DESCRIPTION
			Get a Steam App ID for a given game or application.  Function requires internet access to get a full application list from the Steam Web API
		
		.PARAMETER Application
			The exact name of the Application you are searching for.  Wildcards will be implemented in a future version, but are NOT supported at the moment.
		
		.EXAMPLE
			PS C:\> Get-SteamAppID
		
		.NOTES
			Additional information about the function.
	#>
	function Get-SteamAppID
	{
		[CmdletBinding(PositionalBinding = $true)]
		[OutputType([int])]
		param
		(
			[Parameter(Mandatory = $true,
					   ValueFromPipeline = $true,
					   ValueFromPipelineByPropertyName = $true,
					   ValueFromRemainingArguments = $true,
					   Position = 1)]
			[ValidateNotNullOrEmpty()]
			[Alias('app', 'game')]
			[string]$Application
		)
		
		try
		{
			[xml]$apps = invoke-webrequest -uri 'http://api.steampowered.com/ISteamApps/GetAppList/v0002/?format=xml' -UseBasicParsing
		}
		catch
		{
			Write-Verbose "Unable to pull Steam application list"
		}
		
		$appid = $apps.applist.apps.app | Where-Object { $_.name -eq "$Application" } | Select-Object -ExpandProperty appid
		Write-Output $appid
	}
	
	
	<#
		.SYNOPSIS
			Retrieve latest new for a Steam Application
		
		.DESCRIPTION
			Contacts the Steam Web API and downloads the latest news for the supplied application.
		
		.PARAMETER ApplicationID
			A description of the ApplicationID parameter.
		
		.PARAMETER IncludeDescriptions
			A description of the IncludeDescriptions parameter.
		
		.PARAMETER Limit
			A description of the Limit parameter.
		
		.PARAMETER IncludeAuthor
			A description of the IncludeAuthor parameter.
		
		.EXAMPLE
			PS C:\> Get-NewsForApp -ApplicationID $value1 -IncludeDescriptions $value2
		
		.NOTES
			Additional information about the function.
	#>
	function Get-SteamNewsForApp
	{
		[CmdletBinding(PositionalBinding = $true,
					   SupportsPaging = $true)]
		param
		(
			[Parameter(Mandatory = $true,
					   ValueFromPipeline = $true,
					   ValueFromPipelineByPropertyName = $true,
					   ValueFromRemainingArguments = $true,
					   Position = 1)]
			[ValidateNotNullOrEmpty()]
			[Alias('appid', 'gameid', 'id')]
			[int]$ApplicationID,
			[Parameter(Mandatory = $false,
					   ValueFromPipeline = $true,
					   ValueFromPipelineByPropertyName = $true,
					   ValueFromRemainingArguments = $true,
					   Position = 2)]
			[boolean]$IncludeDescriptions = 0,
			[Parameter(ValueFromPipeline = $true,
					   ValueFromPipelineByPropertyName = $true,
					   ValueFromRemainingArguments = $true,
					   Position = 3)]
			[int]$Limit,
			[Parameter(Position = 4)]
			[boolean]$IncludeAuthor
		)
		
		Begin
		{
			
		}
		Process
		{
			try
			{
				$url = "http://api.steampowered.com/ISteamNews/GetNewsforapp/v0002/?appid="+$ApplicationID+"&format=xml"
				[xml]$appnews = invoke-webrequest -uri $url -UseBasicParsing
				[array]$properties = 'title'
				if ($IncludeAuthor) { $properties += 'author' }
				if ($IncludeDescriptions) { $properties += 'contents' }
				if ($Limit)
				{
					$news = $appnews.appnews.newsitems.newsitem | Select-Object -property $properties -First $Limit
				}
				else
				{
					$news = $appnews.appnews.newsitems.newsitem | Select-Object -property $properties
				}
				
				Write-Output $news
			}
			catch
			{
				Write-Verbose "Cannot retrieve application news"
			}
		}
		End
		{
			
		}
	}
	
	
	
	<#
		.SYNOPSIS
			Retrieve active player count for a Steam game
		
		.DESCRIPTION
			Returns an integer that is the current active player count for a Steam AppID
		
		.PARAMETER Applicationid
			Application ID for a Steam Game or App
		
		.EXAMPLE
			PS C:\> Get-SteamPlayerCount -Applicationid $value1
		
		.NOTES
			Additional information about the function.
	#>
	function Get-SteamPlayerCount
	{
		[CmdletBinding()]
		param
		(
			[Parameter(Mandatory = $true,
					   ValueFromPipeline = $true,
					   ValueFromPipelineByPropertyName = $true,
					   ValueFromRemainingArguments = $true,
					   Position = 1)]
			[ValidateNotNullOrEmpty()]
			[Alias('appid', 'gameid', 'id')]
			[int]$Applicationid
		)
		
		Begin
		{
			
		}
		Process
		{
			$url = 'http://api.steampowered.com/ISteamUserStats/GetNumberOfCurrentPlayers/v0001/?appid=' + $Applicationid + '&format=json'
			try
			{
				$count = (Invoke-WebRequest -uri $url -UseBasicParsing | convertfrom-json).response | Select-Object player_count
				Write-Output $count
			}
			catch
			{
				Write-Verbose "Cannot retrieve player count"
			}
			
		}
		End
		{
			
		}
	}
	
	
	Export-ModuleMember -Function Get-SteamAppID, Get-SteamNewsForApp, Get-SteamPlayerCount -Verbose
	
	
	
	